// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_INCLUDED_message_2eproto
#define PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_message_2eproto();
namespace aonuo {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace aonuo
namespace google {
namespace protobuf {
template<> ::aonuo::Message* Arena::CreateMaybeMessage<::aonuo::Message>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace aonuo {

enum ResultType {
  SUCCESS = 0,
  FAILURE = 1,
  SYS_ERROR = 2,
  ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ResultType_IsValid(int value);
const ResultType ResultType_MIN = SUCCESS;
const ResultType ResultType_MAX = SYS_ERROR;
const int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultType_descriptor();
inline const ::std::string& ResultType_Name(ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultType_descriptor(), value);
}
inline bool ResultType_Parse(
    const ::std::string& name, ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultType>(
    ResultType_descriptor(), name, value);
}
enum DeviceType {
  APP = 0,
  ROBOT = 1,
  DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DeviceType_IsValid(int value);
const DeviceType DeviceType_MIN = APP;
const DeviceType DeviceType_MAX = ROBOT;
const int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor();
inline const ::std::string& DeviceType_Name(DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceType_descriptor(), value);
}
inline bool DeviceType_Parse(
    const ::std::string& name, DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
enum ActiveType {
  INIT = 0,
  ACTIVE = 1,
  CLOSE = 2,
  ActiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ActiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ActiveType_IsValid(int value);
const ActiveType ActiveType_MIN = INIT;
const ActiveType ActiveType_MAX = CLOSE;
const int ActiveType_ARRAYSIZE = ActiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActiveType_descriptor();
inline const ::std::string& ActiveType_Name(ActiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActiveType_descriptor(), value);
}
inline bool ActiveType_Parse(
    const ::std::string& name, ActiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActiveType>(
    ActiveType_descriptor(), name, value);
}
// ===================================================================

class Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aonuo.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string robotCode = 1;
  void clear_robotcode();
  static const int kRobotCodeFieldNumber = 1;
  const ::std::string& robotcode() const;
  void set_robotcode(const ::std::string& value);
  #if LANG_CXX11
  void set_robotcode(::std::string&& value);
  #endif
  void set_robotcode(const char* value);
  void set_robotcode(const char* value, size_t size);
  ::std::string* mutable_robotcode();
  ::std::string* release_robotcode();
  void set_allocated_robotcode(::std::string* robotcode);

  // string module = 5;
  void clear_module();
  static const int kModuleFieldNumber = 5;
  const ::std::string& module() const;
  void set_module(const ::std::string& value);
  #if LANG_CXX11
  void set_module(::std::string&& value);
  #endif
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  ::std::string* mutable_module();
  ::std::string* release_module();
  void set_allocated_module(::std::string* module);

  // string cmd = 6;
  void clear_cmd();
  static const int kCmdFieldNumber = 6;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // .aonuo.ActiveType activeType = 2;
  void clear_activetype();
  static const int kActiveTypeFieldNumber = 2;
  ::aonuo::ActiveType activetype() const;
  void set_activetype(::aonuo::ActiveType value);

  // .aonuo.ResultType resultType = 3;
  void clear_resulttype();
  static const int kResultTypeFieldNumber = 3;
  ::aonuo::ResultType resulttype() const;
  void set_resulttype(::aonuo::ResultType value);

  // .aonuo.DeviceType deviceType = 4;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 4;
  ::aonuo::DeviceType devicetype() const;
  void set_devicetype(::aonuo::DeviceType value);

  // @@protoc_insertion_point(class_scope:aonuo.Message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr robotcode_;
  ::google::protobuf::internal::ArenaStringPtr module_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  int activetype_;
  int resulttype_;
  int devicetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// string robotCode = 1;
inline void Message::clear_robotcode() {
  robotcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::robotcode() const {
  // @@protoc_insertion_point(field_get:aonuo.Message.robotCode)
  return robotcode_.GetNoArena();
}
inline void Message::set_robotcode(const ::std::string& value) {
  
  robotcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aonuo.Message.robotCode)
}
#if LANG_CXX11
inline void Message::set_robotcode(::std::string&& value) {
  
  robotcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aonuo.Message.robotCode)
}
#endif
inline void Message::set_robotcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robotcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aonuo.Message.robotCode)
}
inline void Message::set_robotcode(const char* value, size_t size) {
  
  robotcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aonuo.Message.robotCode)
}
inline ::std::string* Message::mutable_robotcode() {
  
  // @@protoc_insertion_point(field_mutable:aonuo.Message.robotCode)
  return robotcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_robotcode() {
  // @@protoc_insertion_point(field_release:aonuo.Message.robotCode)
  
  return robotcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_robotcode(::std::string* robotcode) {
  if (robotcode != nullptr) {
    
  } else {
    
  }
  robotcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robotcode);
  // @@protoc_insertion_point(field_set_allocated:aonuo.Message.robotCode)
}

// .aonuo.ActiveType activeType = 2;
inline void Message::clear_activetype() {
  activetype_ = 0;
}
inline ::aonuo::ActiveType Message::activetype() const {
  // @@protoc_insertion_point(field_get:aonuo.Message.activeType)
  return static_cast< ::aonuo::ActiveType >(activetype_);
}
inline void Message::set_activetype(::aonuo::ActiveType value) {
  
  activetype_ = value;
  // @@protoc_insertion_point(field_set:aonuo.Message.activeType)
}

// .aonuo.ResultType resultType = 3;
inline void Message::clear_resulttype() {
  resulttype_ = 0;
}
inline ::aonuo::ResultType Message::resulttype() const {
  // @@protoc_insertion_point(field_get:aonuo.Message.resultType)
  return static_cast< ::aonuo::ResultType >(resulttype_);
}
inline void Message::set_resulttype(::aonuo::ResultType value) {
  
  resulttype_ = value;
  // @@protoc_insertion_point(field_set:aonuo.Message.resultType)
}

// .aonuo.DeviceType deviceType = 4;
inline void Message::clear_devicetype() {
  devicetype_ = 0;
}
inline ::aonuo::DeviceType Message::devicetype() const {
  // @@protoc_insertion_point(field_get:aonuo.Message.deviceType)
  return static_cast< ::aonuo::DeviceType >(devicetype_);
}
inline void Message::set_devicetype(::aonuo::DeviceType value) {
  
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:aonuo.Message.deviceType)
}

// string module = 5;
inline void Message::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::module() const {
  // @@protoc_insertion_point(field_get:aonuo.Message.module)
  return module_.GetNoArena();
}
inline void Message::set_module(const ::std::string& value) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aonuo.Message.module)
}
#if LANG_CXX11
inline void Message::set_module(::std::string&& value) {
  
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aonuo.Message.module)
}
#endif
inline void Message::set_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aonuo.Message.module)
}
inline void Message::set_module(const char* value, size_t size) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aonuo.Message.module)
}
inline ::std::string* Message::mutable_module() {
  
  // @@protoc_insertion_point(field_mutable:aonuo.Message.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_module() {
  // @@protoc_insertion_point(field_release:aonuo.Message.module)
  
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_module(::std::string* module) {
  if (module != nullptr) {
    
  } else {
    
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:aonuo.Message.module)
}

// string cmd = 6;
inline void Message::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::cmd() const {
  // @@protoc_insertion_point(field_get:aonuo.Message.cmd)
  return cmd_.GetNoArena();
}
inline void Message::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aonuo.Message.cmd)
}
#if LANG_CXX11
inline void Message::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aonuo.Message.cmd)
}
#endif
inline void Message::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aonuo.Message.cmd)
}
inline void Message::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aonuo.Message.cmd)
}
inline ::std::string* Message::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:aonuo.Message.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_cmd() {
  // @@protoc_insertion_point(field_release:aonuo.Message.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_cmd(::std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:aonuo.Message.cmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace aonuo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aonuo::ResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aonuo::ResultType>() {
  return ::aonuo::ResultType_descriptor();
}
template <> struct is_proto_enum< ::aonuo::DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aonuo::DeviceType>() {
  return ::aonuo::DeviceType_descriptor();
}
template <> struct is_proto_enum< ::aonuo::ActiveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aonuo::ActiveType>() {
  return ::aonuo::ActiveType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_message_2eproto
